---
interface Props {
  id?: string;
  className?: string;
  variant?: "default" | "fade" | "slide-up";
  delay?: number;
}

const { id, className, variant = "fade", delay = 0 } = Astro.props;

const animationClasses = {
  default: "opacity-0 transition-opacity duration-700 ease-out",
  fade: "opacity-0 transition-opacity duration-700 ease-out",
  "slide-up": "opacity-0 translate-y-4 transition-all duration-700 ease-out",
};

const baseClasses = "py-12 md:py-16";
const variantClasses = animationClasses[variant];
const combinedClasses = [baseClasses, variantClasses, className]
  .filter(Boolean)
  .join(" ");

const dataAttrs = {
  "data-section-animate": true,
  "data-animation-variant": variant,
  "data-animation-delay": delay,
};
---

<section id={id} class={combinedClasses} {...dataAttrs}>
  <slot />
</section>

<script>
  const sections = document.querySelectorAll<HTMLElement>(
    "[data-section-animate]"
  );

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const section = entry.target as HTMLElement;
          const variant = section.dataset.animationVariant || "fade";
          const delay = parseInt(section.dataset.animationDelay || "0");

          setTimeout(() => {
            section.classList.remove("opacity-0");
            section.classList.add("opacity-100");

            if (variant === "slide-up") {
              section.classList.remove("translate-y-4");
              section.classList.add("translate-y-0");
            }

            observer.unobserve(section);
          }, delay);
        }
      });
    },
    {
      threshold: 0.1,
      rootMargin: "0px 0px -100px 0px", 
    }
  );

  sections.forEach((section) => {
    observer.observe(section);
  });
</script>
