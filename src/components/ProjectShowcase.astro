---
import Section from "./Section.astro";
import { resumeData } from "../content/data";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Users, CheckCircle2, Zap, ArrowDown } from "lucide-react";

const { projects } = resumeData;

const projectMetrics = {
  costco: {
    primary: { value: "<1s", label: "Load Time", icon: Zap },
    secondary: { value: "8", label: "Team Size Led", icon: Users }
  },
  greatClips: {
    primary: { value: "4.5K", label: "Salons Served", icon: Users },
    secondary: { value: "95%", label: "Test Coverage", icon: CheckCircle2 }
  },
  optum: {
    primary: { value: "70%", label: "Faster Loads", icon: Zap },
    secondary: { value: "100K+", label: "Daily Users", icon: Users }
  }
};

function getProjectMetrics(company: string) {
  const key = company.toLowerCase().replace(/[^a-z]/g, '');
  if (key.includes('costco')) return projectMetrics.costco;
  if (key.includes('great')) return projectMetrics.greatClips;
  if (key.includes('optum')) return projectMetrics.optum;
  return null;
}
---

<Section id='projects' variant='slide-up'>
  <h2 class='text-3xl md:text-4xl font-bold font-heading mb-8'>
    Project Highlights
  </h2>

  <p class='text-lg text-muted-foreground mb-12 max-w-3xl'>
    Selected case studies demonstrating my approach and impact.
  </p>

  <div class='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto'>
    {
      projects.map((project, index) => {
        const metrics = getProjectMetrics(project.company);
        
        return (
          <div
            class='project-card relative group'
            data-project-index={index}
          >
            <Card className='h-full border border-border/40 bg-card/50 backdrop-blur-sm transition-all duration-300 hover:border-primary/50 hover:shadow-lg hover:-translate-y-1'>
              <CardContent className='p-0 h-full flex flex-col'>
                <div class='p-6'>
                  <p class='text-sm font-medium text-muted-foreground mb-1'>
                    {project.company}
                  </p>
                  <h3 class='text-xl font-semibold'>
                    {project.name}
                  </h3>
                </div>

                {metrics && (
                  <div class='px-6 pb-6'>
                    <div class='bg-muted/5 rounded-lg p-4 pl-0'>
                      <div class='grid grid-cols-2 gap-4'>
                        <div>
                          <div class='flex items-center gap-1.5 text-muted-foreground mb-1'>
                            <metrics.primary.icon className='w-3.5 h-3.5' />
                            <span class='text-[11px] uppercase tracking-wider font-medium'>{metrics.primary.label}</span>
                          </div>
                          <div class='font-mono font-bold text-2xl text-foreground metric-value' data-value={metrics.primary.value}>
                            0
                          </div>
                        </div>
                        
                        <div>
                          <div class='flex items-center gap-1.5 text-muted-foreground mb-1'>
                            <metrics.secondary.icon className='w-3.5 h-3.5' />
                            <span class='text-[11px] uppercase tracking-wider font-medium'>{metrics.secondary.label}</span>
                          </div>
                          <div class='font-mono font-bold text-2xl text-foreground metric-value' data-value={metrics.secondary.value}>
                            0
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                <div class='flex-1 px-6 pb-2'>
                  <div class='space-y-4'>
                    <div>
                      <h4 class='text-xs font-semibold uppercase tracking-wider text-primary/80 mb-1.5'>
                        Challenge
                      </h4>
                      <p class='text-sm text-muted-foreground leading-relaxed'>
                        {project.challenge}
                      </p>
                    </div>
                    
                    <div class='flex items-center justify-center py-1'>
                      <ArrowDown className='w-3.5 h-3.5 text-primary/20' />
                    </div>
                    
                    <div>
                      <h4 class='text-xs font-semibold uppercase tracking-wider text-primary/80 mb-1.5'>
                        Solution
                      </h4>
                      <p class='text-sm text-muted-foreground leading-relaxed'>
                        {project.solution}
                      </p>
                    </div>
                  </div>
                </div>

                {project.technologies && project.technologies.length > 0 && (
                  <div class='p-6 mt-auto'>
                    <div class='border-t border-border/10 pt-4'>
                      <div class='flex flex-wrap gap-1.5'>
                        {project.technologies.map((tech: string, techIndex: number) => (
                          <Badge 
                            variant='secondary' 
                            className='text-xs font-medium'
                            style={{animationDelay: `${techIndex * 50}ms`}}
                          >
                            {tech}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        );
      })
    }
  </div>
</Section>

<style>
  .project-card {
    opacity: 0;
    animation: fadeInUp 0.8s ease-out forwards;
  }
  
  .project-card[data-project-index="0"] { animation-delay: 0.1s; }
  .project-card[data-project-index="1"] { animation-delay: 0.2s; }
  .project-card[data-project-index="2"] { animation-delay: 0.3s; }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .tech-pill {
    opacity: 0;
    animation: pillFadeIn 0.5s ease-out forwards;
  }

  @keyframes pillFadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes metricPulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  .metric-value.complete {
    animation: metricPulse 0.6s ease-out;
  }
</style>

<script>
  function animateValue(element: HTMLElement, start: number, end: number, duration: number, suffix: string = '') {
    const range = end - start;
    const minTimer = 50;
    const stepTime = Math.max(Math.abs(Math.floor(duration / range)), minTimer);
    const startTime = Date.now();
    
    const timer = setInterval(() => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      const easeOutQuart = 1 - Math.pow(1 - progress, 4);
      const current = Math.floor(start + (range * easeOutQuart));
      
      element.textContent = current + suffix;
      
      if (progress === 1) {
        clearInterval(timer);
        element.textContent = element.dataset.value || '';
        element.classList.add('complete');
      }
    }, stepTime);
  }

  const metricObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const metrics = entry.target.querySelectorAll('.metric-value');
        metrics.forEach((metric, index) => {
          const element = metric as HTMLElement;
          const value = element.dataset.value || '0';
          
          setTimeout(() => {
            if (value.includes('<')) {
              animateValue(element, 5, 1, 1000, 's');
              setTimeout(() => {
                element.textContent = value;
              }, 1100);
            } else if (value.includes('%')) {
              const num = parseInt(value);
              animateValue(element, 0, num, 1500, '%');
            } else if (value.includes('+')) {
              const num = parseInt(value.replace(/[^\d]/g, ''));
              const suffix = value.includes('M') ? 'M+' : 'K+';
              animateValue(element, 0, num, 1500, suffix);
            } else if (value.includes('s')) {
              const num = parseInt(value);
              animateValue(element, 0, num, 1500, 's');
            } else {
              element.textContent = value;
              element.classList.add('complete');
            }
          }, index * 200); 
        });
        
        metricObserver.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.5
  });

  document.querySelectorAll('.project-card').forEach(card => {
    metricObserver.observe(card);
  });
</script>
